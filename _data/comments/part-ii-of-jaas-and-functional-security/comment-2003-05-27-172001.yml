---
id: disqus-comment-608700943
date: '2003-05-27 17:20:01 +0000'
updated: '2003-05-27 17:20:01 +0000'
post_id: "/blog/part-ii-of-jaas-and-functional-security"
name: Distiller
url: http://195.167.148.4/
message: <p>You need to override the default policy by making a call to javax.auth.Policy.setPolicy,
  or set this via a <a href="http://disq.us/url?url=http%3A%2F%2Fjava.security%3AnJLtAPDoZvjQwcLw3SelzxMUNI0&amp;cuid=1582918"
  rel="nofollow noopener" title="java.security">java.security</a> property ( I prefer
  the former because it means that you can deploy without changing vm parameters).
  <br /><br /></p><p><br /><br />I must say that there is some fiddling around so
  that some of the default protection domains don't interfere with your policy. This
  is achieved by creating a new AccessControlContext with a SubjectDomainController
  inside it when you execute priveleged actions. You can do without this step, but
  I had some problems with the code-based policy interfering with it.  There are also
  situations where your domains get lost because parts of the system get called within
  another context i.e. logging into a system is called back by the LoginContext in
  a different protection domain, and so it is not possible to check permissions from
  here. You might think this is unnecessary, but in the system I built, I don't really
  have the concept of an anonymous user, but rather a guest user that has it's own
  set of credentials / permissions. And a guest has permission to log into certain
  systems. <br /><br /></p><p><br /><br />IMO the whole authorisation part of it is
  a bit flakey and takes a lot of experimenting to determine exactly how it's meant
  to work, because as you said, it's not documented that well (if at all).</p>
avatar: "//a.disquscdn.com/1541535443/images/noavatar92.png"
